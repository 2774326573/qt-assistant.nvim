*qt-assistant.txt*    Qt Assistant Plugin for Neovim

==============================================================================
CONTENTS                                                *qt-assistant-contents*

    1. Introduction ............................ |qt-assistant-introduction|
    2. Installation ............................ |qt-assistant-installation|
    3. Configuration ........................... |qt-assistant-configuration|
    4. Commands ................................ |qt-assistant-commands|
    5. Functions ............................... |qt-assistant-functions|
    6. Class Types ............................. |qt-assistant-class-types|
    7. Project Scripts ......................... |qt-assistant-scripts|
    8. Examples ................................ |qt-assistant-examples|
    9. Troubleshooting ......................... |qt-assistant-troubleshooting|

==============================================================================
1. INTRODUCTION                                     *qt-assistant-introduction*

Qt Assistant is a Neovim plugin designed to enhance Qt C++ development
productivity. It provides:

• Quick class creation with templates
• Smart file management and organization  
• CMake integration
• Project build/run/debug scripts
• Interactive user interface

==============================================================================
2. INSTALLATION                                     *qt-assistant-installation*

Using lazy.nvim: >
    {
        'your-username/qt-assistant.nvim',
        config = function()
            require('qt-assistant').setup()
        end
    }
<

Using packer.nvim: >
    use {
        'your-username/qt-assistant.nvim',
        config = function()
            require('qt-assistant').setup()
        end
    }
<

==============================================================================
3. CONFIGURATION                                   *qt-assistant-configuration*

Default configuration: >
    require('qt-assistant').setup({
        project_root = vim.fn.getcwd(),
        
        directories = {
            source = "src",
            include = "include", 
            ui = "ui",
            resource = "resource",
            scripts = "scripts"
        },
        
        naming_convention = "snake_case", -- or "camelCase"
        auto_update_cmake = true,
        generate_comments = true,
        template_path = vim.fn.stdpath('config') .. '/qt-templates'
    })
<

Options:
    project_root          Root directory of the Qt project
    directories           Directory structure configuration
    naming_convention     File naming style ("snake_case" or "camelCase")
    auto_update_cmake     Automatically update CMakeLists.txt
    generate_comments     Include comments in generated code
    template_path         Custom template directory path

==============================================================================
4. COMMANDS                                             *qt-assistant-commands*

*:QtCreateClass* {name} {type} [options]
    Create a new Qt class with the specified name and type.
    
    Example: >
        :QtCreateClass MainWindow main_window
        :QtCreateClass LoginDialog dialog
<

*:QtCreateUI* {name} {type}
    Create a Qt UI file.
    
    Example: >
        :QtCreateUI MainWindow main_window
<

*:QtCreateModel* {name}
    Create a data model class (shortcut for QtCreateClass with model type).
    
    Example: >
        :QtCreateModel UserModel
<

*:QtAssistant*
    Open the interactive class creator interface.

*:QtScript* {script_name}
    Run a project script.
    
    Available scripts: build, clean, run, debug, test
    
    Example: >
        :QtScript build
        :QtScript run
<

*:QtScriptManager*
    Open the script manager interface.

*:QtInitScripts*
    Initialize the scripts directory with default scripts.

*:QtHelp*
    Show plugin help information.

==============================================================================
5. FUNCTIONS                                           *qt-assistant-functions*

Lua API functions:

*require('qt-assistant').create_class(name, type, options)*
    Create a Qt class programmatically.

*require('qt-assistant').get_project_info()*
    Get current project information.

*require('qt-assistant.core').get_supported_class_types()*
    Get list of supported class types.

*require('qt-assistant.scripts').run_script(name, options)*
    Run a project script.

==============================================================================
6. CLASS TYPES                                         *qt-assistant-class-types*

Supported class types:

*main_window*
    Main window class inheriting from QMainWindow.
    Generated files: .h, .cpp, .ui

*dialog*
    Dialog class inheriting from QDialog.
    Generated files: .h, .cpp, .ui

*widget*
    Custom widget class inheriting from QWidget.
    Generated files: .h, .cpp

*model*
    Data model class inheriting from QAbstractItemModel.
    Generated files: .h, .cpp

*delegate*
    Item delegate class inheriting from QStyledItemDelegate.
    Generated files: .h, .cpp

*thread*
    Thread class inheriting from QThread.
    Generated files: .h, .cpp

*utility*
    Utility class with static methods.
    Generated files: .h, .cpp

*singleton*
    Singleton pattern class.
    Generated files: .h, .cpp

==============================================================================
7. PROJECT SCRIPTS                                       *qt-assistant-scripts*

Available project scripts:

*build*
    Build the Qt project using CMake or other build systems.

*clean*
    Clean build files and temporary files.

*run*
    Run the compiled application.

*debug*
    Start the application in debugger (GDB or LLDB).

*test*
    Run project tests.

Script files are located in the `scripts/` directory and can be customized.

==============================================================================
8. EXAMPLES                                             *qt-assistant-examples*

Create a main window class: >
    :QtCreateClass MainWindow main_window
<

Create a custom widget: >
    :QtCreateClass CustomButton widget
<

Create a data model: >
    :QtCreateModel UserModel
<

Build and run project: >
    :QtScript build
    :QtScript run
<

Open interactive interface: >
    :QtAssistant
<

==============================================================================
9. TROUBLESHOOTING                               *qt-assistant-troubleshooting*

Common issues and solutions:

*CMakeLists.txt not updated*
    - Ensure auto_update_cmake is set to true
    - Check file permissions
    - Verify CMakeLists.txt exists in project root

*Scripts not executable*
    - Run :QtInitScripts to create default scripts
    - Check script file permissions (chmod +x)

*Files created in wrong directory*
    - Verify project_root configuration
    - Check directories configuration
    - Ensure target directories exist

*Template errors*
    - Check template syntax
    - Verify variable names
    - Ensure template files exist

For more help, see the README.md file or create an issue on the project
repository.

==============================================================================
vim:tw=78:ts=8:ft=help:norl: